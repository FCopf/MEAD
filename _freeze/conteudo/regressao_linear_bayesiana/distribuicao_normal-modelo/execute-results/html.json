{
  "hash": "b3aaebc1c44dce73cdbbb2b32057bf67",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"O modelo da distribuição normal\"  \nsubtitle: \"Um modelo para a distribuição de alturas\"  \ndescription: \"Apresenta o modelo matemático da distribuição normal.\"\nCategories: [\n          \"Distribuição normal\",\n          \"Função exponencial\",\n          \"Média\",\n          \"Desvio padrão\"\n        ]\n\nimage: \"images/distribuicao_normal-modelo.png\"  \nexecute:  \n  echo: true  \n  warning: false  \n  include: true  \n  message: false  \n\n---\n\n\n::: {.callout-tip title=\"Bibliotecas utilizadas nesta seção\" collapse=\"true\"}\n\n::: {#5c3568dd .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n:::\n\n![Histograma das alturas de alunos da Escola de Agricultura de Connecticut [@blakeslee1914corn]. $n = 175$ alunos com média $\\overline{Y} = 170,94$ cm e desvio padrão $s = 6,86$. Retirado de @crow1997birth.\"](images/Blakeslee_1914-alturas.png){#fig-alturas_crow1997}\n\n\nA partir da @fig-alturas_crow1997, percebemos que a maioria dos alunos tem alturas intermediárias, enquanto poucos são muito altos ou muito baixos, o que está de acordo com nossa intuição sobre a distribuição das alturas em adultos. Vamos construir passo-a-passo uma função matemática que seja capaz de capturar este comportamento.\n\n## Um modelo para a distribuição de alturas\n\nComeçaremos com a função de *crescimento exponencial*:\n\n\n$$f(x) = e^x$$\n\n\ne de *decaimento exponencial*:\n\n\n$$f(x) = e^{-x}$$\n\n\nCombinando as duas, temos:\n\n\n$$f(x) = e^{-\\mid x \\mid}$$\n\n\nPara ter uma transição mais suave, fazemos uma pequena modificação na função:\n\n\n$$f(x) = e^{-x^2}$$\n\n\nO código a seguir cria vetores a partir destas funções que podemos visualizar graficamente:\n\n::: {#50289f55 .cell layout-ncol='2' layout-nrow='2' execution_count=2}\n``` {.python .cell-code}\nx = np.linspace(-4, 4, 1000)\n\n# Crescimento exponencial\nfx = np.exp(x)\nplt.plot(x, fx)\nplt.title(r'$f(x) = e^x$')\nplt.show()\n\n# Decaimento exponencial\nfx = np.exp(-x)\nplt.plot(x, fx)\nplt.title(r'$f(x) = e^{-x}$')\nplt.show()\n\n# Combinação dos dois\nfx = np.exp(-np.abs(x))\nplt.plot(x, fx)\nplt.title(r'$f(x) = e^{-|x|}$')\nplt.show()\n\n# Transição suave\nfx = np.exp(-x**2)\nplt.plot(x, fx)\nplt.title(r'$f(x) = e^{-x^2}$')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Crescimento exponencial](distribuicao_normal-modelo_files/figure-html/cell-3-output-1.png){width=566 height=432}\n:::\n\n::: {.cell-output .cell-output-display}\n![Decaimento exponencial](distribuicao_normal-modelo_files/figure-html/cell-3-output-2.png){width=566 height=432}\n:::\n\n::: {.cell-output .cell-output-display}\n![Combinando o crescimento e decaimento](distribuicao_normal-modelo_files/figure-html/cell-3-output-3.png){width=571 height=434}\n:::\n\n::: {.cell-output .cell-output-display}\n![Fazendo uma transição suave](distribuicao_normal-modelo_files/figure-html/cell-3-output-4.png){width=571 height=437}\n:::\n:::\n\n\n## Inserindo o parâmetro de dispersão $\\sigma$\n\nEm $f(x) = e^{-x^2}$, não há nada de especial com a escolha da base de Euler ($e = 2.718282...$). Poderíamos ter escolhido qualquer outro número, por exemplo, $30^{-x^2}$, o que nos daria uma função com formato similar:\n\n::: {#70ff372d .cell execution_count=3}\n``` {.python .cell-code}\n# Comparação entre e^{-x^2} e 30^{-x^2}\nfx1 = np.exp(-x**2)\nfx2 = 30**(-x**2)\n\nplt.plot(x, fx1, label=r'$f(x) = e^{-x^2}$')\nplt.plot(x, fx2, label=r'$f(x) = 30^{-x^2}$')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](distribuicao_normal-modelo_files/figure-html/cell-4-output-1.png){width=571 height=411}\n:::\n:::\n\n\nNote, entretanto, que a função $f(x) = e^{-x^2}$ tem um decaimento mais suave se comparado à $f(x) = 30^{-x^2}$, um comportamento que pode ser controlado inserindo uma constante $c = \\frac{1}{2\\sigma^2}$:\n\n\n$$f(x) = e^{-\\frac{1}{2\\sigma^2}x^2}$$\n\nFazendo desta forma, o **parâmetro** $\\sigma$ passa a controlar a *largura* ou *dispersão* da curva: valores maiores de $\\sigma$ tornam o decaimento mais lento e a curva mais \"espalhada\", enquanto valores menores de $\\sigma$ a tornam mais estreita e concentrada ao redor de zero.\n\n\n::: {.callout-tip title=\"Curiosidade\"}\nA escolha da constante $c = \\frac{1}{2\\sigma^2}$ tem o efeito prático de fazer com que a concavidade da curva mude exatamente nos pontos $x = +\\sigma$ e $x = -\\sigma$. Na função da distribuição normal, $\\sigma$ será chamado de desvio padrão.\n:::\n\n::: {#0930c2ce .cell execution_count=4}\n``` {.python .cell-code}\n# Variando o valor de sigma\nsigmas = [0.5, 1, 2]\n\nfor sigma in sigmas:\n    fx = np.exp(-(1/(2*(sigma**2)))*x**2)\n    plt.plot(x, fx, label=fr'$\\sigma = {sigma}$')\n\nplt.legend()\nplt.title(r'$f(x) = e^{-\\frac{1}{2\\sigma^2}x^2}$')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](distribuicao_normal-modelo_files/figure-html/cell-5-output-1.png){width=571 height=437}\n:::\n:::\n\n\n## Inserindo o parâmetro de posição $\\mu$\n\nPor enquanto temos a função:\n\n$$f(x) = e^{-\\frac{1}{2\\sigma^2}x^2}$$\n\nque nos permite agora alterar a abertura da curva, mas está centralizada em zero. Se quisermos que elaesta função possa representar fenômenos que não estejam centrados em zero, precisamos ser capazes de deslocar a função para a direita ou para a esquerda. Fazemos isso inserindo um novo parâmetro que será denominado de a média $\\mu$ da dsitribuição:\n\n\n$$f(x) = e^{-\\frac{1}{2\\sigma^2}(x-\\mu)^2}$$\n\n::: {#618f5fe5 .cell execution_count=5}\n``` {.python .cell-code}\n# Variando o valor de mi (média)\nmis = [-2, 0, 2]\nsigma = 1\n\nfor mi in mis:\n    fx = np.exp(-(1/(2*(sigma**2)))*(x-mi)**2)\n    plt.plot(x, fx, label=fr'$\\mu = {mi}$')\n\nplt.legend()\nplt.title(r'$f(x) = e^{-\\frac{1}{2\\sigma^2}(x-\\mu)^2}$')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](distribuicao_normal-modelo_files/figure-html/cell-6-output-1.png){width=571 height=437}\n:::\n:::\n\n\n## Usando a função como uma Distribuição de Probabilidades\n\nSe queremos utilizar a função acima para prever a frequência relativa de alturas, precisamos que a área abaixo da curva seja **igual a 1**, o que a transforma em uma **Função de Densidade de Probabilidade (PDF)**.\n\nVemos entretanto que a área da função é igual a $\\sigma \\sqrt{2\\pi}$.\n\nO que pode ser conferido obtendo a integral da função: $\\int_{-\\infty}^{+\\infty} f(x) d(x)$\n\n::: {#1f50ad6f .cell execution_count=6}\n``` {.python .cell-code}\nfrom scipy.integrate import quad\n\n# Definindo a função f\ndef f(x, mi, sigma):\n    if sigma <= 0:\n        sigma = 1\n    fx = np.exp(-(1/(2*(sigma**2)))*(x-mi)**2)\n    return (fx)\n\n# Area sob a curva\nmi = 0\nsigma = 1\n\narea, erro = quad(f, -np.inf, np.inf, args = (mi, sigma))\n\nprint(f\"Área sob a curva = {area:.5f}\")\n\n# 2 x raiz(2 x pi)\nprint(sigma * np.sqrt(2*np.pi))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nÁrea sob a curva = 2.50663\n2.5066282746310002\n```\n:::\n:::\n\n\nPara corrigir a área sob a curva, inserimos $\\sigma \\sqrt{2\\pi}$ no denominador da função, ficando com:\n\n$$f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}} e^{-\\frac{1}{2\\sigma^2}(x-\\mu)^2}$$\n\nA função acima é conhecida como [Distribuição Normal](https://pt.wikipedia.org/wiki/Distribui%C3%A7%C3%A3o_normal) ou [Curva de Gauss](https://pt.wikipedia.org/wiki/Carl_Friedrich_Gauss). Nesta função $\\mu$ é a **média**, que representa o ponto central da curva, e $\\sigma$ é o **desvio padrão** que controla a abertura da curva.\n\nPodemos verificar agora que a área desta função é sempre igua a 1.\n\n::: {#67bbb50b .cell execution_count=7}\n``` {.python .cell-code}\nfrom scipy.integrate import quad\n\n# Definindo a função f\ndef fnormal(x, mi, sigma):\n    if sigma <= 0:\n        sigma = 1\n    fx = (1/(sigma*np.sqrt(2*np.pi))) * np.exp(-(1/(2*(sigma**2)))*(x-mi)**2)\n    return (fx)\n\n# Area sob a curva\nmi = 0\nsigma = 30\narea, erro = quad(fnormal, -np.inf, np.inf, args = (mi, sigma))\n\nprint(f\"Área sob a curva = {area:.5f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nÁrea sob a curva = 1.00000\n```\n:::\n:::\n\n\n## Biblioteca [SciPy](https://docs.scipy.org/doc/scipy/reference/)\n\nExiste uma função pronta em python que nos dá a função da distribuição normal disponível em `scipy.stats`. Como já importamos esta bibloteca no início do código, podemos acessá-la para comparar com nossa função `fnormal`:\n\n::: {#f9dbff48 .cell execution_count=8}\n``` {.python .cell-code}\nimport scipy.stats as st\n\nx = np.linspace(2, 18, 1000)\ny1 = fnormal(x, mi = 10, sigma = 2)\ny2 = st.norm.pdf(x = x, loc = 10, scale = 2)\n```\n:::\n\n\nE colocar as figuras lado-a-lado:\n\n::: {#a7aaba64 .cell execution_count=9}\n``` {.python .cell-code}\nfig, axes = plt.subplots(1, 2)\n\naxes[0].plot(x, y1)\naxes[0].set_title('função `fnormal`')\naxes[1].plot(x, y2)\naxes[1].set_title('função scipy.stats.norm.pdf()')\n\nplt.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](distribuicao_normal-modelo_files/figure-html/cell-10-output-1.png){width=662 height=470}\n:::\n:::\n\n\n",
    "supporting": [
      "distribuicao_normal-modelo_files"
    ],
    "filters": [],
    "includes": {}
  }
}