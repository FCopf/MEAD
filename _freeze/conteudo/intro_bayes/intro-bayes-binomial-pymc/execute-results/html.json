{
  "hash": "d92f9c3e2fb2c4609af5bc686efa9824",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Inferência Bayesiana Binomial com PyMC\"  \nsubtitle: \"Estimando $p$ pela modelagem probabilística\"  \ndescription: \"Introdução à modelagem probabilística na abordagem bayesiana.\"\nCategories: [\n          \"Inferência bayesiana\",\n          \"Distribuição a priori\",\n          \"Distribuição posterior\",\n          \"Modelagem probabilística\",\n          \"Modelo binomial\"\n        ]\n\nimage: \"images/intro-bayes-binomial-pymc.png\"  \nexecute:  \n  echo: true  \n  warning: false  \n  include: true  \n  message: false  \n\n---\n\n\n\n\n## Visão Geral\n\nO **PyMC** é um pacote Python para modelagem estatística Bayesiana que utiliza métodos como **amostragem MCMC** (Markov Chain Monte Carlo) para estimar distribuições *a posteriori*. No caso de uma distribuição Binomial, podemos facilmente especificar uma **priori** Beta para o parâmetro $p$, observar dados (número de sucessos em $N$ ensaios) e obter a posteriori por meio de métodos de amostragem.\n\n### Passo a Passo\n\n1. **Definição do Modelo**  \n   - Especificamos $p$ ~ Beta($\\alpha_{\\mathrm{prior}}$, $\\beta_{\\mathrm{prior}}$) como *a priori*.  \n   - Modelamos os dados observados ($k$ sucessos em $N$ ensaios) via Binomial($N, p$).\n\n2. **Amostragem MCMC**  \n   - O PyMC utiliza, por padrão, o NUTS (No-U-Turn Sampler), uma variação de Hamiltonian Monte Carlo.  \n   - Ajustamos parâmetros como `draws` (quantas amostras serão salvas após o período de warmup), `tune` (quantas iterações de aquecimento) e `chains` (quantas cadeias paralelas).\n\n3. **Inspeção dos Resultados**  \n   - `az.summary(trace)` exibe estatísticas como média, desvio-padrão, intervalos de credibilidade e $\\hat{R}$ (verifica convergência).  \n   - `az.plot_trace(trace)` plota a série temporal das amostras e o histograma.  \n   - `az.plot_posterior(trace, var_names=[\"p\"])` mostra a densidade *a posteriori*, intervalos de credibilidade e outras informações úteis.\n\n## Exemplo de Código\n\n::: {#2118b090 .cell execution_count=1}\n``` {.python .cell-code}\nimport pymc as pm\nimport arviz as az  # pacote complementar para análise/plot de resultados\n\n# Parâmetros do experimento:\nN = 10    # número total de ensaios\nk = 6     # número de sucessos observados\n\n# Parâmetros da priori Beta:\nalpha_param = 2\nbeta_param = 2\n\n# Define o modelo PyMC:\nwith pm.Model() as model:\n    # 1) Distribuição a priori: Beta(alpha_param, beta_param)\n    p = pm.Beta(\"p\", alpha=alpha_param, beta=beta_param)\n    \n    # 2) Observações Binomiais\n    # 'observed=k' indica que estamos informando dados observados\n    obs = pm.Binomial(\"obs\", n=N, p=p, observed=k)\n    \n    # 3) Amostragem MCMC\n    # O PyMC usará, por padrão, o NUTS (No-U-Turn Sampler) para este tipo de modelo.\n    trace = pm.sample(\n        draws=2000,     # número de amostras pós-warmup\n        tune=1000,      # número de iterações de warmup (ajuste)\n        chains=2,       # número de cadeias em paralelo\n        random_seed=42, # para reprodutibilidade\n        target_accept=0.9\n    )\n\n# Podemos resumir e visualizar os resultados usando o ArviZ\nprint(az.summary(trace, var_names=[\"p\"], kind=\"stats\"))\n\n# Plotando a posteriori e a evolução da cadeia\naz.plot_trace(trace, var_names=[\"p\"])\naz.plot_posterior(trace, var_names=[\"p\"], rope=[0.3, 0.7]);  # intervalos de relevância, se desejar\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"058d40b290234c5c961b5c7d5d7d08f0\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n    mean     sd  hdi_3%  hdi_97%\np  0.568  0.126   0.336      0.8\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](intro-bayes-binomial-pymc_files/figure-html/cell-2-output-4.png){width=912 height=209}\n:::\n\n::: {.cell-output .cell-output-display}\n![](intro-bayes-binomial-pymc_files/figure-html/cell-2-output-5.png){width=540 height=440}\n:::\n:::\n\n\n### Interpretação\n\n- A **forma** e a **localização** da posteriori dependerão tanto dos dados observados ($k$, $N$) quanto dos parâmetros da *a priori* ($\\alpha$, $\\beta$).  \n- Conforme $N$ aumenta, a verossimilhança passa a dominar o resultado, reduzindo o impacto de uma *a priori* moderada.  \n- Se você alterar $\\alpha_{\\mathrm{prior}}$ e $\\beta_{\\mathrm{prior}}$, verá como suposições prévias mudam a forma inicial da posteriori, sobretudo em regimes de poucos dados.\n\n---\n\n## Exercício Sugerido\n\n- **Varie** $N$ e $k$ para simular cenários distintos (poucos sucessos, muitos sucessos) e veja como a posteriori se adapta.  \n- **Altere** $\\alpha_{\\mathrm{prior}}$ e $\\beta_{\\mathrm{prior}}$ (por exemplo, prior fortemente concentrada em 0.8) e observe se, com poucos dados, a posteriori permanece próxima da *a priori*.  \n- Tente também usar `pm.sample_posterior_predictive(trace, ...)` para fazer predições sobre futuros ensaios (por exemplo, quantos sucessos esperar em novos $N_{\\text{novos}}$ lançamentos).\n\n",
    "supporting": [
      "intro-bayes-binomial-pymc_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"058d40b290234c5c961b5c7d5d7d08f0\":{\"model_module\":\"@jupyter-widgets/output\",\"model_module_version\":\"1.0.0\",\"model_name\":\"OutputModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/output\",\"_model_module_version\":\"1.0.0\",\"_model_name\":\"OutputModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/output\",\"_view_module_version\":\"1.0.0\",\"_view_name\":\"OutputView\",\"layout\":\"IPY_MODEL_15ad1af8eee74f3ca018de0fb78d539b\",\"msg_id\":\"\",\"outputs\":[{\"data\":{\"text/html\":\"<pre style=\\\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\\\">                                                                                                                   \\n <span style=\\\"font-weight: bold\\\"> Progress                 </span> <span style=\\\"font-weight: bold\\\"> Draws </span> <span style=\\\"font-weight: bold\\\"> Divergences </span> <span style=\\\"font-weight: bold\\\"> Step size </span> <span style=\\\"font-weight: bold\\\"> Grad evals </span> <span style=\\\"font-weight: bold\\\"> Sampling Speed  </span> <span style=\\\"font-weight: bold\\\"> Elapsed </span> <span style=\\\"font-weight: bold\\\"> Remaining </span> \\n ───────────────────────────────────────────────────────────────────────────────────────────────────────────────── \\n  <span style=\\\"color: #1f77b4; text-decoration-color: #1f77b4\\\">━━━━━━━━━━━━━━━━━━━━━━━━</span>   3000    0             1.45        3            4123.20 draws/s   0:00:00   0:00:00    \\n  <span style=\\\"color: #1f77b4; text-decoration-color: #1f77b4\\\">━━━━━━━━━━━━━━━━━━━━━━━━</span>   3000    0             1.11        1            3893.26 draws/s   0:00:00   0:00:00    \\n                                                                                                                   \\n</pre>\\n\",\"text/plain\":\"                                                                                                                   \\n \\u001b[1m \\u001b[0m\\u001b[1mProgress                \\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mDraws\\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mDivergences\\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mStep size\\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mGrad evals\\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mSampling Speed \\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mElapsed\\u001b[0m\\u001b[1m \\u001b[0m \\u001b[1m \\u001b[0m\\u001b[1mRemaining\\u001b[0m\\u001b[1m \\u001b[0m \\n ───────────────────────────────────────────────────────────────────────────────────────────────────────────────── \\n  \\u001b[38;2;31;119;180m━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m   3000    0             1.45        3            4123.20 draws/s   0:00:00   0:00:00    \\n  \\u001b[38;2;31;119;180m━━━━━━━━━━━━━━━━━━━━━━━━\\u001b[0m   3000    0             1.11        1            3893.26 draws/s   0:00:00   0:00:00    \\n                                                                                                                   \\n\"},\"metadata\":{},\"output_type\":\"display_data\"}],\"tabbable\":null,\"tooltip\":null}},\"15ad1af8eee74f3ca018de0fb78d539b\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}