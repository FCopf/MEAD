{
  "hash": "57444aa0daec7be4651207f4a74f562c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"(Básico da) Manipulação de data frames\"\ndescription: \"Princípios de manipulação de data frames no R: importação, seleção de linhas e colunas e criação de variáveis.\"\ncategories: [\n          \"R\",\n          \"Programação\",\n          \"Manipulação de dados\",\n          \"Data frames\"\n        ]\nimage: \"images/data-frames-r.jpg\"\nexecute:\n  echo: true\n  warning: false\n  include: true\n  message: false\n---\n\n\n\nEmbora seja possivel criar um data frame entrando com os dados diretamente via linha de comando, é mais eficiente importá-los a partir de arquivos texto (`.csv`, `.txt`).\n\n## Importando arquivos `.csv`\n\n\n\n::: {.cell}\n\n:::\n\n\n\nUm arquivo do tipo `.csv` pode ser lido com a função `read.csv`. Faça o download do conjunto de dados `dbenv.csv` disponível no repositório [datasets](https://github.com/FCopf/datasets) e salve-o em sua pasta de trabalho (ex. `\"C:/seu_caminho/Introducao_R\")`. Ao abrir o arquivo em algum editor de texto verá que ele é composto por $30$ *linhas* por $11$ *colunas*.\n\nApós fazer o download, você pode importar o conjunto de dados utilizando o comando:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbenv <- read.csv(file = \"C:/seu_caminho/Introducao_R/dbenv.csv\", \n                 header = TRUE, dec = '.', sep = ',')\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nA função `read.csv` possui diferentes argumentos. A argumento `header` define se a primeira linha consiste do cabeçalho (`TRUE`) ou não (`FALSE`). O argumento `dec` define se o separador decimal consiste de *vírgula* ou *ponto* e o argumento `sep` informa sobre qual é o caracter separador de colunas utilizado no arquivo. No arquivo em questão as colunas são separadas por *vírgulas*. Outros tipos de separadores comuns são *ponto-e-vírgula* ou *tabulações*.\n\nConfira os nomes das $11$ variáveis (cabeçalho), a dimensão da tabela (número de linhas e colunas) e sua estrutura (um `data.frame` formado por $11$ vetores numéricos).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbenv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    dfs alt   slo  flo pH har pho nit amm oxy bdo\n1     3 934 6.176   84 79  45   1  20   0 122  27\n2    22 932 3.434  100 80  40   2  20  10 103  19\n3   102 914 3.638  180 83  52   5  22   5 105  35\n4   185 854 3.497  253 80  72  10  21   0 110  13\n5   215 849 3.178  264 81  84  38  52  20  80  62\n6   324 846 3.497  286 79  60  20  15   0 102  53\n7   268 841 4.205  400 81  88   7  15   0 111  22\n8   491 792 3.258  130 81  94  20  41  12  70  81\n9   705 752 2.565  480 80  90  30  82  12  72  52\n10  990 617 4.605 1000 77  82   6  75   1 100  43\n11 1234 483 3.738 1990 81  96  30 160   0 115  27\n12 1324 477 2.833 2000 79  86   4  50   0 122  30\n13 1436 450 3.091 2110 81  98   6  52   0 124  24\n14 1522 434 2.565 2120 83  98  27 123   0 123  38\n15 1645 415 1.792 2300 86  86  40 100   0 117  21\n16 1859 375 3.045 1610 80  88  20 200   5 103  27\n17 1985 348 1.792 2430 80  92  20 250  20 102  46\n18 2110 332 2.197 2500 80  90  50 220  20 103  28\n19 2246 310 1.792 2590 81  84  60 220  15 106  33\n20 2477 286 2.197 2680 80  86  30 300  30 103  28\n21 2812 262 2.398 2720 79  85  20 220  10  90  41\n22 2940 254 2.708 2790 81  88  20 162   7  91  48\n23 3043 246 2.565 2880 81  97 260 350 115  63 164\n24 3147 241 1.386 2976 80  99 140 250  60  52 123\n25 3278 231 1.792 3870 79 100 422 620 180  41 167\n26 3579 214 1.792 3910 79  94 143 300  30  62  89\n27 3732 206 2.565 3960 81  90  58 300  26  72  63\n28 3947 195 1.386 4320 83 100  74 400  30  81  45\n29 4220 183 1.946 6770 78 110  45 162  10  90  42\n30 4530 172 1.099 6900 82 109  65 160  10  82  44\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(dbenv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"dfs\" \"alt\" \"slo\" \"flo\" \"pH\"  \"har\" \"pho\" \"nit\" \"amm\" \"oxy\" \"bdo\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(dbenv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30 11\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n## Acessando `.csv` em uma *url*\n\nComo este arquivo está em um repositório na nuvem, poderia ser lido acessando diretamente sua *url*, sem a necessidade de fazer o download:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbenv <- read.csv(file = \"https://raw.githubusercontent.com/FCopf/datasets/refs/heads/main/dbenv.csv\", \n                 header = TRUE, dec = '.', \n                 sep = ',')\n```\n:::\n\n\n:::\n\n::: callout-note\n## Iniciando uma seção de trabalho\n\nUma seção no R, se refere ao ambiente em que ficam armazenados os objetos (vetores, matrizes, data frames, etc.) criados durante o processo de manipulação e análise de dados. Ao fechar uma seção do R (ex. ao sair do RStudio), esta pode ser salva guardando os objetos criados. O arquivo de uma seção é salvo com extensão `.RData`.\n\nAo abrir um novo script (com extensão `.r`) em um editor de texto é importante definir o diretório de trabalho, que será o local onde ficarão dados e onde serão salvos os resultados do trabalho (ex. figuras, tabelas, etc.). No RStudio, um novo *script* pode ser aberto via menu `Arquivo --> Novo script`. Ao iniciar o R-Studio abre-se uma nova seção. O diretório desta seção pode ser verificado pelo comando:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\n\nPara criar uma pasta (ex. `Introducao_R`) e direcionar a seção de trabalho para esta pasta utiliza-se a função `setwd()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/seu_caminho/Introducao_R\")\n```\n:::\n\n\n\nA função `getwd()` pode ser utilizada para verificar se a alteração de diretório foi realizada\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nC:/seu_caminho/Introducao_R\n```\n\n\n:::\n:::\n\n\n\nA partir deste momento o R irá ler e salvar aquivos sempre a partir desse diretório.\n:::\n\n## Manipulação de data frames\n\n### Seleção de linhas e colunas em data frames\n\nNo data frame os nomes das colunas e linhas podem ser acessados por:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(dbenv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"dfs\" \"alt\" \"slo\" \"flo\" \"pH\"  \"har\" \"pho\" \"nit\" \"amm\" \"oxy\" \"bdo\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(dbenv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\"\n[16] \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\"\n```\n\n\n:::\n:::\n\n\n\nOs números *\"entre aspas\"* significam que estão sendo lidos como caracteres.\n\nColunas específicas podem ser acessadas por meio de seus nomes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolunas <- c(\"dfs\", \"flo\", \"oxy\")\ndbenv[,colunas]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    dfs  flo oxy\n1     3   84 122\n2    22  100 103\n3   102  180 105\n4   185  253 110\n5   215  264  80\n6   324  286 102\n7   268  400 111\n8   491  130  70\n9   705  480  72\n10  990 1000 100\n11 1234 1990 115\n12 1324 2000 122\n13 1436 2110 124\n14 1522 2120 123\n15 1645 2300 117\n16 1859 1610 103\n17 1985 2430 102\n18 2110 2500 103\n19 2246 2590 106\n20 2477 2680 103\n21 2812 2720  90\n22 2940 2790  91\n23 3043 2880  63\n24 3147 2976  52\n25 3278 3870  41\n26 3579 3910  62\n27 3732 3960  72\n28 3947 4320  81\n29 4220 6770  90\n30 4530 6900  82\n```\n\n\n:::\n:::\n\n\n\nOu por suas posições:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolunas_num <- c(1, 3, 4)\ndbenv[,colunas_num]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    dfs   slo  flo\n1     3 6.176   84\n2    22 3.434  100\n3   102 3.638  180\n4   185 3.497  253\n5   215 3.178  264\n6   324 3.497  286\n7   268 4.205  400\n8   491 3.258  130\n9   705 2.565  480\n10  990 4.605 1000\n11 1234 3.738 1990\n12 1324 2.833 2000\n13 1436 3.091 2110\n14 1522 2.565 2120\n15 1645 1.792 2300\n16 1859 3.045 1610\n17 1985 1.792 2430\n18 2110 2.197 2500\n19 2246 1.792 2590\n20 2477 2.197 2680\n21 2812 2.398 2720\n22 2940 2.708 2790\n23 3043 2.565 2880\n24 3147 1.386 2976\n25 3278 1.792 3870\n26 3579 1.792 3910\n27 3732 2.565 3960\n28 3947 1.386 4320\n29 4220 1.946 6770\n30 4530 1.099 6900\n```\n\n\n:::\n:::\n\n\n\nO mesmo é válido para as linhas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinhas <- c(\"3\", \"7\", \"9\")\ndbenv[linhas,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dfs alt   slo flo pH har pho nit amm oxy bdo\n3 102 914 3.638 180 83  52   5  22   5 105  35\n7 268 841 4.205 400 81  88   7  15   0 111  22\n9 705 752 2.565 480 80  90  30  82  12  72  52\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlinhas_num <- c(3, 7, 9)\ndbenv[linhas_num,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dfs alt   slo flo pH har pho nit amm oxy bdo\n3 102 914 3.638 180 83  52   5  22   5 105  35\n7 268 841 4.205 400 81  88   7  15   0 111  22\n9 705 752 2.565 480 80  90  30  82  12  72  52\n```\n\n\n:::\n:::\n\n\n\nSub-conjunto do data frame podem ser selecionados combinando esses procedimentos.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbenv[linhas,colunas]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dfs flo oxy\n3 102 180 105\n7 268 400 111\n9 705 480  72\n```\n\n\n:::\n:::\n\n\n\n### Adicionando novas colunas\n\nEste conjunto de dados mostra medidas físicas e químicas obtidas em um riacho amostrado desde a cabeceira até a foz. O ponto mais alto (934 m de altitude) está a 3 km da cabeceira enquanto o ponto mais baixo está a 172 m de altitude e a 4530 km da cabeceira. Vamos criar uma nova variável categorizando os trechos do rio em `Alto`, `Medio` e `Baixo` assumindo a seguinte relação:\n\n-   $0$ a $300$ m: `Baixo`;\n-   $300$ a $600$ m: `Médio`;\n-   Acima de $600$ m: `Alto`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelv_cat <- cut(dbenv$alt, breaks = c(0, 300, 600, 1000), \n              labels = c(\"Baixo\", \"Medio\", \"Alto\"))\n```\n:::\n\n\n\nA inserção do novo objeto `elv_cat` no data frame pode ser feito simplesmente por:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbenv$trecho <- elv_cat\n```\n:::\n\n\n\nA nova coluna denominada `trecho` foi inserida no data frame, como pode ser visto:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(dbenv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dfs alt   slo flo pH har pho nit amm oxy bdo trecho\n1   3 934 6.176  84 79  45   1  20   0 122  27   Alto\n2  22 932 3.434 100 80  40   2  20  10 103  19   Alto\n3 102 914 3.638 180 83  52   5  22   5 105  35   Alto\n4 185 854 3.497 253 80  72  10  21   0 110  13   Alto\n5 215 849 3.178 264 81  84  38  52  20  80  62   Alto\n6 324 846 3.497 286 79  60  20  15   0 102  53   Alto\n```\n\n\n:::\n:::\n\n\n\nO mesmo pode ser realizado com a função `transform()`. Vamos utilizá-la para criar uma nova variável categórica a partir do oxigênio dissolvido, considerando 3 níveis de satuação: `Pobre` ($0$ a $5$), `Médio` ($5$ a $8$) e `Saturado` (acima de $8$).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbenv <- transform(dbenv,  \n saturacao = cut(dbenv$oxy, breaks = c(0, 40, 109, 124), \n           labels = c(\"Pobre\", \"Medio\", \"Saturado\")))\n```\n:::\n\n\n\nVeja agora o data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbenv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    dfs alt   slo  flo pH har pho nit amm oxy bdo trecho saturacao\n1     3 934 6.176   84 79  45   1  20   0 122  27   Alto  Saturado\n2    22 932 3.434  100 80  40   2  20  10 103  19   Alto     Medio\n3   102 914 3.638  180 83  52   5  22   5 105  35   Alto     Medio\n4   185 854 3.497  253 80  72  10  21   0 110  13   Alto  Saturado\n5   215 849 3.178  264 81  84  38  52  20  80  62   Alto     Medio\n6   324 846 3.497  286 79  60  20  15   0 102  53   Alto     Medio\n7   268 841 4.205  400 81  88   7  15   0 111  22   Alto  Saturado\n8   491 792 3.258  130 81  94  20  41  12  70  81   Alto     Medio\n9   705 752 2.565  480 80  90  30  82  12  72  52   Alto     Medio\n10  990 617 4.605 1000 77  82   6  75   1 100  43   Alto     Medio\n11 1234 483 3.738 1990 81  96  30 160   0 115  27  Medio  Saturado\n12 1324 477 2.833 2000 79  86   4  50   0 122  30  Medio  Saturado\n13 1436 450 3.091 2110 81  98   6  52   0 124  24  Medio  Saturado\n14 1522 434 2.565 2120 83  98  27 123   0 123  38  Medio  Saturado\n15 1645 415 1.792 2300 86  86  40 100   0 117  21  Medio  Saturado\n16 1859 375 3.045 1610 80  88  20 200   5 103  27  Medio     Medio\n17 1985 348 1.792 2430 80  92  20 250  20 102  46  Medio     Medio\n18 2110 332 2.197 2500 80  90  50 220  20 103  28  Medio     Medio\n19 2246 310 1.792 2590 81  84  60 220  15 106  33  Medio     Medio\n20 2477 286 2.197 2680 80  86  30 300  30 103  28  Baixo     Medio\n21 2812 262 2.398 2720 79  85  20 220  10  90  41  Baixo     Medio\n22 2940 254 2.708 2790 81  88  20 162   7  91  48  Baixo     Medio\n23 3043 246 2.565 2880 81  97 260 350 115  63 164  Baixo     Medio\n24 3147 241 1.386 2976 80  99 140 250  60  52 123  Baixo     Medio\n25 3278 231 1.792 3870 79 100 422 620 180  41 167  Baixo     Medio\n26 3579 214 1.792 3910 79  94 143 300  30  62  89  Baixo     Medio\n27 3732 206 2.565 3960 81  90  58 300  26  72  63  Baixo     Medio\n28 3947 195 1.386 4320 83 100  74 400  30  81  45  Baixo     Medio\n29 4220 183 1.946 6770 78 110  45 162  10  90  42  Baixo     Medio\n30 4530 172 1.099 6900 82 109  65 160  10  82  44  Baixo     Medio\n```\n\n\n:::\n:::\n\n\n\n### Família `apply` e `aggregate`\n\nEm muitas situações temos interesse aplicar uma determinada função a cada linha ou a cada coluna de um data frame ou ainda para grupos distintos de linhas.\n\nObserve por exemplo que se extraímos a média aritmética da coluna `pH` ($\\times 10$).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(dbenv$pH)  # média aritmética\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 80.5\n```\n\n\n:::\n:::\n\n\n\nO resultado é calculado para toda a coluna.\n\n### Função `tapply` {.unnumbered}\n\nPodemos estar interessados no entanto, em extrair as médias separadamente para os trechos alto, médio e baixo do rio. A função `tapply()` é útil nestas situações.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntapply(dbenv$pH, dbenv$trecho, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Baixo    Medio     Alto \n80.27273 81.22222 80.10000 \n```\n\n\n:::\n:::\n\n\n\nA função acima, pode ser *lida* do modo:\n\n-   Selecione a coluna `pH`;\n-   Agrupe os elementos em função dos níveis em `trecho` (Baixo, Medio, Alto);\n-   Calcule a média aritmética para cada sub-grupo.\n\nNote que o resultado foi um vetor em que cada elemento corresponde à média de um sub-grupo. Funções que retornam mais de um valor resultam em um objeto no formato de `lista`. A função `range()` por exemplo, retorna dois valores (mínimo e máximo). Ao utilizá-la junto à função `tapply()` termos como resultado uma lista composta por um vetor para cada subgrupo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntapply(dbenv$pH, dbenv$trecho, range)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Baixo\n[1] 78 83\n\n$Medio\n[1] 79 86\n\n$Alto\n[1] 77 83\n```\n\n\n:::\n:::\n\n\n\n### Função `apply` {.unnumbered}\n\nPodemos aplicar uma determinada função a todas as linhas ou colunas de um data frame (ou matriz).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(dbenv[,1:5], MARGIN = 2, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        dfs         alt         slo         flo          pH \n1879.033333  481.500000    2.757733 2220.100000   80.500000 \n```\n\n\n:::\n:::\n\n\n\nO argumento `MARGIN = 2` diz que desejamos aplicar a função ás colunas da matriz. Com `MARGIN = 1` aplicamos a função às linhas da matriz.\n\n### Função `lapply` {.unnumbered}\n\nSe o objeto é do formato `lista`, o comando `lapply()` aplica uma função a cada elemento da lista. Considere a lista:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnossalista <- list(Ilha = c(\"Ilhabela\", \"Anchieta\", \"Cardoso\"), \n                  Areaskm2 = c(347.5, 8.3, 131), \n                  Bioma = rep(\"Mata Atlantica\",3),\n                  Lat = c(23, 25, 23),\n                  Long = c(45, 47, 45))\n```\n:::\n\n\n\nVeja os resultados dos comandos abaixo:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(nossalista, sort)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Ilha\n[1] \"Anchieta\" \"Cardoso\"  \"Ilhabela\"\n\n$Areaskm2\n[1]   8.3 131.0 347.5\n\n$Bioma\n[1] \"Mata Atlantica\" \"Mata Atlantica\" \"Mata Atlantica\"\n\n$Lat\n[1] 23 23 25\n\n$Long\n[1] 45 45 47\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nExistem outras funções neste grupo, Veja o `help()` destas funções pois são extremamente úteis na manipulação de data frames e listas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?tapply\n?apply\n?lapply\n?mapply\n?replicate\n```\n:::\n\n\n:::\n\n### Função `aggregate`  {.unnumbered}\n\nA função `tapply()` aplica uma função a subgrupos de uma **única** coluna. A função `aggregate()` faz o mesmo, porém para **múltiplas** colunas agrupadas de acordo com uma ou mais categorias. O comando abaixo calcula os valores médios das variáveis para os trechos alto, médio e baixo combinados com níveis de $pH$.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedia.trecho <- aggregate(dbenv[, 1:11], \n                         by = list(TRECHO = dbenv$trecho,\n                                   ALCALINO = dbenv$pH >= 80),\n                         FUN = mean)\nmedia.trecho\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  TRECHO ALCALINO      dfs      alt      slo       flo       pH      har\n1  Baixo    FALSE 3472.250 222.5000 1.982000 4317.5000 78.75000 97.25000\n2  Medio    FALSE 1324.000 477.0000 2.833000 2000.0000 79.00000 86.00000\n3   Alto    FALSE  439.000 799.0000 4.759333  456.6667 78.33333 62.33333\n4  Baixo     TRUE 3402.286 228.5714 1.986571 3786.5714 81.14286 95.57143\n5  Medio     TRUE 1754.625 393.3750 2.501500 2206.2500 81.50000 91.50000\n6   Alto     TRUE  284.000 847.7143 3.396429  258.1429 80.85714 74.28571\n        pho       nit        amm       oxy      bdo\n1 157.50000 325.50000 57.5000000  70.75000 84.75000\n2   4.00000  50.00000  0.0000000 122.00000 30.00000\n3   9.00000  36.66667  0.3333333 108.00000 41.00000\n4  92.42857 274.57143 39.7142857  77.71429 73.57143\n5  31.62500 165.62500  7.5000000 111.62500 30.50000\n6  16.00000  36.14286  8.4285714  93.00000 40.57143\n```\n\n\n:::\n:::\n\n\n\n## Exportando um data frame\n\nFinalmente, podemos exportar o data frame `media.trecho` obtido acima para um arquivo `Mediaportecho.csv`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.table(media.trecho, file = \"C:/seu_caminho/Introducao_R/Mediaportecho.csv\", \n            sep = \",\", dec = '.', row.names = FALSE, \n            col.names = TRUE)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "data-frames_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}