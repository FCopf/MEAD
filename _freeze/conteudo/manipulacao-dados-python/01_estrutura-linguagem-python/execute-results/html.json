{
  "hash": "e126f9c4e2279b8466b8bc2471286ad2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Introdução ao Python: Estrutura da Linguagem\"\ndescription: \"Estrutura da linguagem Python, incluindo operações básicas, tipos de objetos (listas, arrays, strings, dicionários) e sintaxe principal.\"\nimage: \"images/estrutura-linguagem-python.png\"\nexecute:\n  echo: true\n  warning: false\n  include: true\n  message: false\n---\n\n\nPython é uma linguagem de programação de alto nível, interpretada e de propósito geral. É amplamente utilizada em ciência de dados, desenvolvimento web, automação e muitas outras áreas. Para análise de dados, utilizamos principalmente as bibliotecas NumPy para computação numérica e Pandas para manipulação de dados tabulares.\n\n::: {.callout-tip title=\"Código em Python\"}\n\nAcompanha este tutorial o [Introdução ao Python](01_estrutura-linguagem-python.py){target=\"_blank\"}\n\n:::\n\n\n## Pacotes essenciais\n\nAntes de começarmos, vamos importar os pacotes fundamentais que utilizaremos:\n\n::: {#e642dbd4 .cell execution_count=1}\n``` {.python .cell-code}\nimport math\nimport numpy as np\nimport pandas as pd\n```\n:::\n\n\n## Operações aritméticas\n\nPython utiliza os operadores matemáticos padrão de forma intuitiva:\n\n::: {#882980bb .cell execution_count=2}\n``` {.python .cell-code}\n2 + 4\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n6\n```\n:::\n:::\n\n\n::: {#bbbe0f2f .cell execution_count=3}\n``` {.python .cell-code}\n2 * 4\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n8\n```\n:::\n:::\n\n\n::: {#aff6f286 .cell execution_count=4}\n``` {.python .cell-code}\n2 - 4\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n-2\n```\n:::\n:::\n\n\n::: {#6ff25d2f .cell execution_count=5}\n``` {.python .cell-code}\n2**4  # Potenciação\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n16\n```\n:::\n:::\n\n\n::: {#2fbad1a5 .cell execution_count=6}\n``` {.python .cell-code}\n13 / 2   # Divisão comum (resultado decimal)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n6.5\n```\n:::\n:::\n\n\n::: {#f3777286 .cell execution_count=7}\n``` {.python .cell-code}\n13 // 2  # Divisão inteira\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n6\n```\n:::\n:::\n\n\n::: {#413fff58 .cell execution_count=8}\n``` {.python .cell-code}\n13 % 2   # Módulo (resto da divisão)\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n1\n```\n:::\n:::\n\n\nPython respeita a precedência dos operadores matemáticos:\n\n::: {#830c6adb .cell execution_count=9}\n``` {.python .cell-code}\n5 * (9 + 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n55\n```\n:::\n:::\n\n\n::: {#5e6f002d .cell execution_count=10}\n``` {.python .cell-code}\n5 * 9 + 2\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n47\n```\n:::\n:::\n\n\n::: {#e19a9801 .cell execution_count=11}\n``` {.python .cell-code}\n3 + 4**2\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n19\n```\n:::\n:::\n\n\n### Funções matemáticas\n\nPython oferece funções matemáticas tanto no módulo `math` quanto no NumPy:\n\n::: {#b95961ec .cell execution_count=12}\n``` {.python .cell-code}\nmath.log(100)      # Logaritmo natural\nmath.log10(100)    # Logaritmo base 10\nmath.sqrt(36)      # Raiz quadrada\nmath.pi            # Constante π\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n3.141592653589793\n```\n:::\n:::\n\n\n::: {#cddf554a .cell execution_count=13}\n``` {.python .cell-code}\nmath.sin(0.5 * math.pi)       # Seno\nmath.sin(math.radians(90))    # Seno de 90 graus\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n1.0\n```\n:::\n:::\n\n\nCom NumPy, temos funções vetorizadas:\n\n::: {#8f79c3b5 .cell execution_count=14}\n``` {.python .cell-code}\nnp.log(100)\nnp.sqrt(36)\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\nnp.float64(6.0)\n```\n:::\n:::\n\n\n## Atribuição de valores\n\nEm Python, atribuímos valores a variáveis usando o operador `=`:\n\n::: {#186f1c1d .cell execution_count=15}\n``` {.python .cell-code}\nx = np.log(100)\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\nnp.float64(4.605170185988092)\n```\n:::\n:::\n\n\n::: {#cd621099 .cell execution_count=16}\n``` {.python .cell-code}\ny = x + 10\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\nnp.float64(14.605170185988092)\n```\n:::\n:::\n\n\nAo reatribuir um valor, o anterior é substituído:\n\n::: {#1ebb7f43 .cell execution_count=17}\n``` {.python .cell-code}\nx = 5\ny = x + 10\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n15\n```\n:::\n:::\n\n\nPython diferencia maiúsculas de minúsculas:\n\n::: {#53e48a43 .cell execution_count=18}\n``` {.python .cell-code}\na = math.sqrt(49)\nA = math.sqrt(81)\na, A\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n(7.0, 9.0)\n```\n:::\n:::\n\n\n## Estruturas de dados\n\n### Listas\n\nListas são coleções ordenadas e mutáveis em Python:\n\n::: {#f0c8072e .cell execution_count=19}\n``` {.python .cell-code}\nx = [4, 3.0, 5, 9, 10]\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\n[4, 3.0, 5, 9, 10]\n```\n:::\n:::\n\n\n::: {#fdb940e2 .cell execution_count=20}\n``` {.python .cell-code}\ntype(x)        # Tipo do objeto\nlen(x)         # Comprimento da lista\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\n5\n```\n:::\n:::\n\n\nAcessando elementos (índices começam em 0):\n\n::: {#3f16de21 .cell execution_count=21}\n``` {.python .cell-code}\nx[0]           # Primeiro elemento\nx[0:]          # Do primeiro elemento em diante\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\n[4, 3.0, 5, 9, 10]\n```\n:::\n:::\n\n\n**Importante**: Multiplicar uma lista por um número replica a lista:\n\n::: {#0b33adec .cell execution_count=22}\n``` {.python .cell-code}\nx * 2          # Replica a lista duas vezes\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n[4, 3.0, 5, 9, 10, 4, 3.0, 5, 9, 10]\n```\n:::\n:::\n\n\n### Arrays NumPy\n\nArrays são mais eficientes para operações numéricas:\n\n::: {#8ac4c806 .cell execution_count=23}\n``` {.python .cell-code}\ny = np.array(x)\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\narray([ 4.,  3.,  5.,  9., 10.])\n```\n:::\n:::\n\n\n::: {#d8e614c5 .cell execution_count=24}\n``` {.python .cell-code}\ntype(y)\nlen(y)\ny[0]           # Primeiro elemento\ny[0:2]         # Primeiros dois elementos\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\narray([4., 3.])\n```\n:::\n:::\n\n\nOperações em arrays são **elemento por elemento**:\n\n::: {#4d472d2b .cell execution_count=25}\n``` {.python .cell-code}\ny * 2          # Multiplica cada elemento por 2\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\narray([ 8.,  6., 10., 18., 20.])\n```\n:::\n:::\n\n\nComparação entre listas e arrays:\n\n::: {#264eb7ca .cell execution_count=26}\n``` {.python .cell-code}\nx * 2                    # Lista: replica\ny * 2                    # Array: multiplica cada elemento\n[i * 2 for i in x]      # List comprehension: multiplica cada elemento\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\n[8, 6.0, 10, 18, 20]\n```\n:::\n:::\n\n\n### Sequências\n\nPython oferece várias formas de criar sequências:\n\n::: {#41e677bd .cell execution_count=27}\n``` {.python .cell-code}\nlist(range(2, 11))       # Sequência de 2 a 10\nnp.linspace(2, 10, 4)    # 4 pontos igualmente espaçados entre 2 e 10\nnp.repeat(4, 6)          # Repete o valor 4 seis vezes\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\narray([4, 4, 4, 4, 4, 4])\n```\n:::\n:::\n\n\n::: {#1c2316e4 .cell execution_count=28}\n``` {.python .cell-code}\n[2, 5] * 3               # Lista: replica\nnp.tile([2, 5], 3)       # Array: repete o padrão\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\narray([2, 5, 2, 5, 2, 5])\n```\n:::\n:::\n\n\n### Strings (cadeias de caracteres)\n\nStrings são sequências de caracteres:\n\n::: {#37123804 .cell execution_count=29}\n``` {.python .cell-code}\nespecies = [\"Deuterodon iguape\", \n           \"Characidium japuhybense\", \n           \"Trichomycterus zonatus\"]\nespecies\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n['Deuterodon iguape', 'Characidium japuhybense', 'Trichomycterus zonatus']\n```\n:::\n:::\n\n\n::: {#ee9da0b2 .cell execution_count=30}\n``` {.python .cell-code}\nsorted(especies)         # Ordena alfabeticamente\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\n['Characidium japuhybense', 'Deuterodon iguape', 'Trichomycterus zonatus']\n```\n:::\n:::\n\n\n**Importante**: Python é tipado dinamicamente, mas operações devem ser compatíveis:\n\n::: {#03aef9ad .cell execution_count=31}\n``` {.python .cell-code}\nespecies = [\n    \"Deuterodon iguape\",\n    \"Characidium japuhybense\", \n    \"Trichomycterus zonatus\",\n    4]\n\n# especies[3] + 3  # Isso causaria erro: não pode somar string com número\n```\n:::\n\n\n### Arrays 2D (matrizes)\n\nListas de listas podem representar matrizes:\n\n::: {#e963d132 .cell execution_count=32}\n``` {.python .cell-code}\nx = [\n    [21, 26, 5, 18],\n    [17, 28, 20, 15],\n    [13, 14, 27, 22]\n]\n\nx\nx[0]           # Primeira linha\nx[0][0]        # Elemento da primeira linha, primeira coluna\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\n21\n```\n:::\n:::\n\n\nArrays NumPy oferecem indexação mais conveniente:\n\n::: {#fe8e9ed5 .cell execution_count=33}\n``` {.python .cell-code}\ny = np.array(x)\ny\ny[0]           # Primeira linha\ny[0][0]        # Elemento [0,0]\ny[0, 0]        # Notação matricial\ny[0,:]         # Primeira linha (todas as colunas)\ny[:,0]         # Primeira coluna (todas as linhas)\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\narray([21, 17, 13])\n```\n:::\n:::\n\n\n### Dicionários\n\nDicionários armazenam pares chave-valor:\n\n::: {#042d59c2 .cell execution_count=34}\n``` {.python .cell-code}\nnosso_dic = {\n    'Ilha' : ['Ilhabela', 'Anchieta', 'Cardoso'],\n    'Areaskm2': [347.5, 8.3, 131]\n}\nnosso_dic\nnosso_dic.keys()       # Mostra as chaves\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\ndict_keys(['Ilha', 'Areaskm2'])\n```\n:::\n:::\n\n\n### DataFrames\n\nDataFrames são estruturas tabulares do Pandas, similares a planilhas:\n\n::: {#a743e544 .cell execution_count=35}\n``` {.python .cell-code}\ndf = pd.DataFrame(nosso_dic)\ndf\ndf['Ilha']             # Acessa a coluna 'Ilha'\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\n0    Ilhabela\n1    Anchieta\n2     Cardoso\nName: Ilha, dtype: object\n```\n:::\n:::\n\n\n",
    "supporting": [
      "01_estrutura-linguagem-python_files"
    ],
    "filters": [],
    "includes": {}
  }
}