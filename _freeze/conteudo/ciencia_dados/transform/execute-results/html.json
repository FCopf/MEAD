{
  "hash": "414c209208814ee81e6665862152ef30",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Transformação de Dados\"\ndescription: \"Manipulação e transformação de dados com as funções principais do Tidyverse, incluindo ```dplyr``` e ```tidyr```.\"\ncategories: [\n          \"Ciência de dados\",\n          \"R\",\n          \"Tidyverse\",\n          \"Transformação de dados\"\n        ]\nimage: \"images/transform.jpg\"\nexecute:\n  echo: true\n  warning: false\n  include: true\n  message: false\n---\n\n\n\nApós importar uma base de dados para o R, os pacotes `dplyr` e `tidyr` são essenciais para transformação de data frames. As funções desses pacotes ajudam na análise, modelagem e comunicação de dados. Neste seção são apresentadas as principais funções para transformar observações (linhas) e variáveis em um data frame a partir de uma ou mais tabelas. A [Cheatsheets](https://rstudio.com/resources/cheatsheets/) do `dplyr` apresenta outros recursos não discutidos nesta seção.\n\n## Ordenando as linhas: funções `arrange()` e `desc()`\n\nAs funções `arrange()` e `desc()` permitem ordenar a base de dados com base nos valores de uma ou mais colunas. Usará-se o conjunto de dados `iris` como exemplo.\n\nCarregue os pacote `dplyr`, `tidyr` e `readr`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\n```\n:::\n\n\n\n\nPara carregar e visualizar as primeiras linhas da base de dados `iris`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"iris\")\nhead(iris, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1           5.1         3.5          1.4         0.2  setosa\n2           4.9         3.0          1.4         0.2  setosa\n3           4.7         3.2          1.3         0.2  setosa\n4           4.6         3.1          1.5         0.2  setosa\n5           5.0         3.6          1.4         0.2  setosa\n6           5.4         3.9          1.7         0.4  setosa\n7           4.6         3.4          1.4         0.3  setosa\n8           5.0         3.4          1.5         0.2  setosa\n9           4.4         2.9          1.4         0.2  setosa\n10          4.9         3.1          1.5         0.1  setosa\n```\n\n\n:::\n:::\n\n\n\nPara ordenar a tabela pela coluna `Sepal.Length` em ordem crescente:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  arrange(Sepal.Length)\n```\n:::\n\n\n\nPara ordenar em ordem decrescente:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  arrange(desc(Sepal.Length))\n```\n:::\n\n\n\nÉ possível também combinar duas colunas, ordenando a tabela pela coluna `Species` (em ordem alfabética decrescente) e `Sepal.Length` (em ordem crescente):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  arrange(desc(Species), Sepal.Length)\n```\n:::\n\n\n\nPara criar um novo objeto com a tabela ordenada\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_ordenado <- iris |> \n  arrange(Sepal.Length)\n\niris_ordenado\n```\n:::\n\n\n\n## Filtrando linhas: função `filter()`\n\nA função `filter()` extrai linhas que satisfazem uma condição lógica. Para filtrar as linhas referentes à espécie `virginica`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  filter(Species == \"virginica\")\n```\n:::\n\n\n\nPara filtrar espécies diferentes de `virginica`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  filter(Species != \"virginica\")\n```\n:::\n\n\n\nPara filtrar linhas onde o comprimento das pétalas seja menor que $1.3$:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  filter(Petal.Length < 1.3)\n```\n:::\n\n\n\nPara filtrar onde o comprimento das pétalas seja menor que $1.3$ e o comprimento das sépalas seja maior ou igual a $5$:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  filter(Petal.Length < 1.3 & Sepal.Length >= 5)\n```\n:::\n\n\n\n## Selecionando colunas: função `select()`\n\nA função `select()` permite extrair ou reorganizar um subconjunto de colunas de um data frame.\n\nPara extrair uma coluna: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  select(Petal.Length)\n```\n:::\n\n\n\nPara extrair múltiplas colunas:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  select(Petal.Length, Species)\n```\n:::\n\n\n\nPara extrair um intervalo de colunas:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  select(Petal.Length:Species)\n```\n:::\n\n\n\nPara excluir uma coluna:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  select(-Petal.Length)\n```\n:::\n\n\n\nPara excluir colunas específicas:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  select(!c(Petal.Length, Species))\n```\n:::\n\n\n\nPara selecionar colunas que começam com \"Sepal\":\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  select(starts_with(\"Sepal\"))\n```\n:::\n\n\n\nPara combinar `filter()` e `select()` a fim de extrair um subconjunto do data frame:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  select(starts_with(\"Sepal\")) |> \n  filter(Sepal.Length <= 4.5)\n```\n:::\n\n\n\n### Selecionando/Excluindo variáveis numéricas e categóricas\n\nImporte o conjuntoi de dados `Reservatorios_Parana_parcial.csv`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres = read_delim(file = \"https://raw.githubusercontent.com/FCopf/datasets/refs/heads/main/Reservatorios_Parana_parcial.csv\",\n                  delim = ',',\n                  locale = locale(decimal_mark = '.',\n                                  encoding = 'latin1'))\n```\n:::\n\n\n#### Seleção de variáveis categóricas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres |>\n  select(Reservatorio, Bacia, Trofia)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 3\n   Reservatorio Bacia  Trofia       \n   <chr>        <chr>  <chr>        \n 1 Cavernoso    Iguacu OligotrÃ³fico\n 2 Curucaca     Iguacu OligotrÃ³fico\n 3 Foz do Areia Iguacu OligotrÃ³fico\n 4 Irai         Iguacu EutrÃ³fico   \n 5 JMF          Iguacu MesotrÃ³fico \n 6 Jordao       Iguacu OligotrÃ³fico\n 7 Passauna     Iguacu OligotrÃ³fico\n 8 Piraquara    Iguacu OligotrÃ³fico\n 9 Salto Caxias Iguacu OligotrÃ³fico\n10 Salto do Vau Iguacu OligotrÃ³fico\n# ℹ 21 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nres |>\n  select(where(is.character))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 3\n   Reservatorio Bacia  Trofia       \n   <chr>        <chr>  <chr>        \n 1 Cavernoso    Iguacu OligotrÃ³fico\n 2 Curucaca     Iguacu OligotrÃ³fico\n 3 Foz do Areia Iguacu OligotrÃ³fico\n 4 Irai         Iguacu EutrÃ³fico   \n 5 JMF          Iguacu MesotrÃ³fico \n 6 Jordao       Iguacu OligotrÃ³fico\n 7 Passauna     Iguacu OligotrÃ³fico\n 8 Piraquara    Iguacu OligotrÃ³fico\n 9 Salto Caxias Iguacu OligotrÃ³fico\n10 Salto do Vau Iguacu OligotrÃ³fico\n# ℹ 21 more rows\n```\n\n\n:::\n:::\n\n\n\n#### Seleção de variáveis numéricas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres |>\n  select(Fechamento, Area, pH, Condutividade, Alcalinidade, P.total, Riqueza, CPUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 8\n   Fechamento   Area    pH Condutividade Alcalinidade P.total Riqueza  CPUE\n        <dbl>  <dbl> <dbl>         <dbl>        <dbl>   <dbl>   <dbl> <dbl>\n 1       1965   2.9    7.4          33.1        140.      7.8      18  9.22\n 2       1982   2      7            32.4        126.      4.7      16 28.7 \n 3       1980 139      7.3          35.5         97      14.3      19 11.6 \n 4       2000  15      6.9          50.2          3.3    53.4      12 30.8 \n 5       1970   0.45   7.3          40.2          3.7    41.2      18  5.95\n 6       1996   3.4    7.1          23.7        153.      3.3      17  7.75\n 7       1978  14      8.8         126.         526      15.2      11  7.51\n 8       1979   3.3    7.1          22.8         50.7     4.5       8  4.01\n 9       1998 124      7.3          39.6        106      12.1      21 20.8 \n10       1959   2.9    6.5          23.2        279      11         8  2.43\n# ℹ 21 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nres |>\n  select(Fechamento, Area, pH:CPUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 8\n   Fechamento   Area    pH Condutividade Alcalinidade P.total Riqueza  CPUE\n        <dbl>  <dbl> <dbl>         <dbl>        <dbl>   <dbl>   <dbl> <dbl>\n 1       1965   2.9    7.4          33.1        140.      7.8      18  9.22\n 2       1982   2      7            32.4        126.      4.7      16 28.7 \n 3       1980 139      7.3          35.5         97      14.3      19 11.6 \n 4       2000  15      6.9          50.2          3.3    53.4      12 30.8 \n 5       1970   0.45   7.3          40.2          3.7    41.2      18  5.95\n 6       1996   3.4    7.1          23.7        153.      3.3      17  7.75\n 7       1978  14      8.8         126.         526      15.2      11  7.51\n 8       1979   3.3    7.1          22.8         50.7     4.5       8  4.01\n 9       1998 124      7.3          39.6        106      12.1      21 20.8 \n10       1959   2.9    6.5          23.2        279      11         8  2.43\n# ℹ 21 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nres |>\n  select(where(is.numeric))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 8\n   Fechamento   Area    pH Condutividade Alcalinidade P.total Riqueza  CPUE\n        <dbl>  <dbl> <dbl>         <dbl>        <dbl>   <dbl>   <dbl> <dbl>\n 1       1965   2.9    7.4          33.1        140.      7.8      18  9.22\n 2       1982   2      7            32.4        126.      4.7      16 28.7 \n 3       1980 139      7.3          35.5         97      14.3      19 11.6 \n 4       2000  15      6.9          50.2          3.3    53.4      12 30.8 \n 5       1970   0.45   7.3          40.2          3.7    41.2      18  5.95\n 6       1996   3.4    7.1          23.7        153.      3.3      17  7.75\n 7       1978  14      8.8         126.         526      15.2      11  7.51\n 8       1979   3.3    7.1          22.8         50.7     4.5       8  4.01\n 9       1998 124      7.3          39.6        106      12.1      21 20.8 \n10       1959   2.9    6.5          23.2        279      11         8  2.43\n# ℹ 21 more rows\n```\n\n\n:::\n:::\n\n\n\n### Exclusão de variáveis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres |>\n  select(-Fechamento, -Area)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 9\n   Reservatorio Bacia  Trofia      pH Condutividade Alcalinidade P.total Riqueza\n   <chr>        <chr>  <chr>    <dbl>         <dbl>        <dbl>   <dbl>   <dbl>\n 1 Cavernoso    Iguacu Oligotr…   7.4          33.1        140.      7.8      18\n 2 Curucaca     Iguacu Oligotr…   7            32.4        126.      4.7      16\n 3 Foz do Areia Iguacu Oligotr…   7.3          35.5         97      14.3      19\n 4 Irai         Iguacu EutrÃ³f…   6.9          50.2          3.3    53.4      12\n 5 JMF          Iguacu MesotrÃ…   7.3          40.2          3.7    41.2      18\n 6 Jordao       Iguacu Oligotr…   7.1          23.7        153.      3.3      17\n 7 Passauna     Iguacu Oligotr…   8.8         126.         526      15.2      11\n 8 Piraquara    Iguacu Oligotr…   7.1          22.8         50.7     4.5       8\n 9 Salto Caxias Iguacu Oligotr…   7.3          39.6        106      12.1      21\n10 Salto do Vau Iguacu Oligotr…   6.5          23.2        279      11         8\n# ℹ 21 more rows\n# ℹ 1 more variable: CPUE <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nres |>\n  select(!where(is.numeric))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 3\n   Reservatorio Bacia  Trofia       \n   <chr>        <chr>  <chr>        \n 1 Cavernoso    Iguacu OligotrÃ³fico\n 2 Curucaca     Iguacu OligotrÃ³fico\n 3 Foz do Areia Iguacu OligotrÃ³fico\n 4 Irai         Iguacu EutrÃ³fico   \n 5 JMF          Iguacu MesotrÃ³fico \n 6 Jordao       Iguacu OligotrÃ³fico\n 7 Passauna     Iguacu OligotrÃ³fico\n 8 Piraquara    Iguacu OligotrÃ³fico\n 9 Salto Caxias Iguacu OligotrÃ³fico\n10 Salto do Vau Iguacu OligotrÃ³fico\n# ℹ 21 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nres |>\n  select(!where(is.character))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 8\n   Fechamento   Area    pH Condutividade Alcalinidade P.total Riqueza  CPUE\n        <dbl>  <dbl> <dbl>         <dbl>        <dbl>   <dbl>   <dbl> <dbl>\n 1       1965   2.9    7.4          33.1        140.      7.8      18  9.22\n 2       1982   2      7            32.4        126.      4.7      16 28.7 \n 3       1980 139      7.3          35.5         97      14.3      19 11.6 \n 4       2000  15      6.9          50.2          3.3    53.4      12 30.8 \n 5       1970   0.45   7.3          40.2          3.7    41.2      18  5.95\n 6       1996   3.4    7.1          23.7        153.      3.3      17  7.75\n 7       1978  14      8.8         126.         526      15.2      11  7.51\n 8       1979   3.3    7.1          22.8         50.7     4.5       8  4.01\n 9       1998 124      7.3          39.6        106      12.1      21 20.8 \n10       1959   2.9    6.5          23.2        279      11         8  2.43\n# ℹ 21 more rows\n```\n\n\n:::\n:::\n\n\n\n## Outros exemplos de seleção/exclusão de variáveis\n\n### `all_off()`, `any_of()`, `one_of()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. all_of(): Seleciona todas as colunas mencionadas\nres |>\n  select(all_of(c('Reservatorio', 'Bacia')))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 2\n   Reservatorio Bacia \n   <chr>        <chr> \n 1 Cavernoso    Iguacu\n 2 Curucaca     Iguacu\n 3 Foz do Areia Iguacu\n 4 Irai         Iguacu\n 5 JMF          Iguacu\n 6 Jordao       Iguacu\n 7 Passauna     Iguacu\n 8 Piraquara    Iguacu\n 9 Salto Caxias Iguacu\n10 Salto do Vau Iguacu\n# ℹ 21 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. any_of(): Seleciona qualquer coluna que exista na lista (ignora colunas inexistentes)\nres |>\n  select(any_of(c('Reservatorio', 'Bacia', 'Turbidez'))) # funciona, any_of() ignora que `Turbidez` não existe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 2\n   Reservatorio Bacia \n   <chr>        <chr> \n 1 Cavernoso    Iguacu\n 2 Curucaca     Iguacu\n 3 Foz do Areia Iguacu\n 4 Irai         Iguacu\n 5 JMF          Iguacu\n 6 Jordao       Iguacu\n 7 Passauna     Iguacu\n 8 Piraquara    Iguacu\n 9 Salto Caxias Iguacu\n10 Salto do Vau Iguacu\n# ℹ 21 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nres |>\n  select(one_of(c('Reservatorio', 'Trofia', 'Turbidez'))) # funciona, one_of() avisa que `Turbidez` não existe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 2\n   Reservatorio Trofia       \n   <chr>        <chr>        \n 1 Cavernoso    OligotrÃ³fico\n 2 Curucaca     OligotrÃ³fico\n 3 Foz do Areia OligotrÃ³fico\n 4 Irai         EutrÃ³fico   \n 5 JMF          MesotrÃ³fico \n 6 Jordao       OligotrÃ³fico\n 7 Passauna     OligotrÃ³fico\n 8 Piraquara    OligotrÃ³fico\n 9 Salto Caxias OligotrÃ³fico\n10 Salto do Vau OligotrÃ³fico\n# ℹ 21 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# res |>\n#   select(Reservatorio, Bacia, Turbidez) # Não funciona, pois `Turbidez` não existe\n```\n:::\n\n\n\n### `contains()`, `ends_with()`, `everything()`, `last_col()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 3. contains(): Seleciona colunas cujos nomes contêm uma string específica\nres |>\n  select(contains('to'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 3\n   Reservatorio Fechamento P.total\n   <chr>             <dbl>   <dbl>\n 1 Cavernoso          1965     7.8\n 2 Curucaca           1982     4.7\n 3 Foz do Areia       1980    14.3\n 4 Irai               2000    53.4\n 5 JMF                1970    41.2\n 6 Jordao             1996     3.3\n 7 Passauna           1978    15.2\n 8 Piraquara          1979     4.5\n 9 Salto Caxias       1998    12.1\n10 Salto do Vau       1959    11  \n# ℹ 21 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# 4. ends_with(): Seleciona colunas que terminam com uma string específica\nres |>\n  select(ends_with('dade'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 2\n   Condutividade Alcalinidade\n           <dbl>        <dbl>\n 1          33.1        140. \n 2          32.4        126. \n 3          35.5         97  \n 4          50.2          3.3\n 5          40.2          3.7\n 6          23.7        153. \n 7         126.         526  \n 8          22.8         50.7\n 9          39.6        106  \n10          23.2        279  \n# ℹ 21 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# 5. everything(): Seleciona todas as colunas (pode ser usado para reorganizar)\nres |>\n  select(Fechamento, pH, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 11\n   Fechamento    pH Reservatorio Bacia    Area Trofia Condutividade Alcalinidade\n        <dbl> <dbl> <chr>        <chr>   <dbl> <chr>          <dbl>        <dbl>\n 1       1965   7.4 Cavernoso    Iguacu   2.9  Oligo…          33.1        140. \n 2       1982   7   Curucaca     Iguacu   2    Oligo…          32.4        126. \n 3       1980   7.3 Foz do Areia Iguacu 139    Oligo…          35.5         97  \n 4       2000   6.9 Irai         Iguacu  15    EutrÃ…          50.2          3.3\n 5       1970   7.3 JMF          Iguacu   0.45 Mesot…          40.2          3.7\n 6       1996   7.1 Jordao       Iguacu   3.4  Oligo…          23.7        153. \n 7       1978   8.8 Passauna     Iguacu  14    Oligo…         126.         526  \n 8       1979   7.1 Piraquara    Iguacu   3.3  Oligo…          22.8         50.7\n 9       1998   7.3 Salto Caxias Iguacu 124    Oligo…          39.6        106  \n10       1959   6.5 Salto do Vau Iguacu   2.9  Oligo…          23.2        279  \n# ℹ 21 more rows\n# ℹ 3 more variables: P.total <dbl>, Riqueza <dbl>, CPUE <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# 6. last_col(): Seleciona a última coluna\nres |>\n  select(last_col())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 1\n    CPUE\n   <dbl>\n 1  9.22\n 2 28.7 \n 3 11.6 \n 4 30.8 \n 5  5.95\n 6  7.75\n 7  7.51\n 8  4.01\n 9 20.8 \n10  2.43\n# ℹ 21 more rows\n```\n\n\n:::\n:::\n\n\n\n### Expressoes regulares\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 7. matches(): Seleciona colunas que correspondem a uma expressão regular\nres |>\n  select(matches('^[FA]')) # Colunas que começam com 'F ou A'\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 3\n   Fechamento   Area Alcalinidade\n        <dbl>  <dbl>        <dbl>\n 1       1965   2.9         140. \n 2       1982   2           126. \n 3       1980 139            97  \n 4       2000  15             3.3\n 5       1970   0.45          3.7\n 6       1996   3.4         153. \n 7       1978  14           526  \n 8       1979   3.3          50.7\n 9       1998 124           106  \n10       1959   2.9         279  \n# ℹ 21 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# 8. Seleciona colunas cujos nomes:\n# 1. Começam com a letra \"A\" ou \"C\"\n# 2. Podem conter qualquer sequência de caracteres após a primeira letra\n# 3. Terminam com as letras \"a\" ou \"e\"\nres |>\n  select(matches('^[AC].*[ae]$'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 4\n     Area Condutividade Alcalinidade  CPUE\n    <dbl>         <dbl>        <dbl> <dbl>\n 1   2.9           33.1        140.   9.22\n 2   2             32.4        126.  28.7 \n 3 139             35.5         97   11.6 \n 4  15             50.2          3.3 30.8 \n 5   0.45          40.2          3.7  5.95\n 6   3.4           23.7        153.   7.75\n 7  14            126.         526    7.51\n 8   3.3           22.8         50.7  4.01\n 9 124             39.6        106   20.8 \n10   2.9           23.2        279    2.43\n# ℹ 21 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Renomeando colunas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres |>\n  rename(Fosforo_total = P.total,\n         Captura_kg = CPUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 11\n   Reservatorio Bacia  Fechamento   Area Trofia    pH Condutividade Alcalinidade\n   <chr>        <chr>       <dbl>  <dbl> <chr>  <dbl>         <dbl>        <dbl>\n 1 Cavernoso    Iguacu       1965   2.9  Oligo…   7.4          33.1        140. \n 2 Curucaca     Iguacu       1982   2    Oligo…   7            32.4        126. \n 3 Foz do Areia Iguacu       1980 139    Oligo…   7.3          35.5         97  \n 4 Irai         Iguacu       2000  15    EutrÃ…   6.9          50.2          3.3\n 5 JMF          Iguacu       1970   0.45 Mesot…   7.3          40.2          3.7\n 6 Jordao       Iguacu       1996   3.4  Oligo…   7.1          23.7        153. \n 7 Passauna     Iguacu       1978  14    Oligo…   8.8         126.         526  \n 8 Piraquara    Iguacu       1979   3.3  Oligo…   7.1          22.8         50.7\n 9 Salto Caxias Iguacu       1998 124    Oligo…   7.3          39.6        106  \n10 Salto do Vau Iguacu       1959   2.9  Oligo…   6.5          23.2        279  \n# ℹ 21 more rows\n# ℹ 3 more variables: Fosforo_total <dbl>, Riqueza <dbl>, Captura_kg <dbl>\n```\n\n\n:::\n:::\n\n\n\n## Agrupando tabelas: funções do grupo ```join```\n\nAs funções `left_join()`, `right_join()`, `inner_join()`, `anti_join()` e `full_join()` do pacote `dplyr` em R são utilizadas para combinar dois data frames baseados em uma coluna ou colunas comuns. Esses tipos de joins são amplamente utilizados em operações de banco de dados e manipulação de dados.\n\nConsidere os arquivos `regiao.csv` e `habitat.csv` do repositório [datasets](https://github.com/FCopf/datasets).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregiao <- read_csv(\"https://raw.githubusercontent.com/FCopf/datasets/refs/heads/main/regiao.csv\")\nhabitat <- read_csv(\"https://raw.githubusercontent.com/FCopf/datasets/refs/heads/main/habitat.csv\")\nregiao\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   Riacho Bacia      Município      Área\n   <chr>  <chr>      <chr>         <dbl>\n 1 R1     Boicucanga São Sebastião  30.3\n 2 R4     Boicucanga São Sebastião  30.3\n 3 R8     Boicucanga São Sebastião  30.3\n 4 R2     Cubatão    Cubatão       189  \n 5 R5     Cubatão    Cubatão       189  \n 6 R10    Cubatão    Cubatão       189  \n 7 R13    Cubatão    Cubatão       189  \n 8 R6     Quilombo   Santos         86  \n 9 R9     Quilombo   Santos         86  \n10 R7     Quilombo   Santos         86  \n```\n\n\n:::\n\n```{.r .cell-code}\nhabitat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n  Riacho Altitude Largura Profundidade\n  <chr>     <dbl>   <dbl>        <dbl>\n1 R1           74     7.8         20.2\n2 R4           14    10.9         17.7\n3 R8          245     8.3         19.5\n4 R11         241     2.2         20.3\n5 R2           29     1.6         11.8\n6 R6           86    15.2         35.3\n7 R9           77     4.1         18.9\n8 R7           63    14.2         42.1\n```\n\n\n:::\n:::\n\n\n\n**Tabela regiao**: Contém informações sobre a bacia hidrográfica, área da bacia e município de alguns riachos da região litorânea de São Paulo.\n\n**Tabela habitat**: Contém informações sobre a largura e profundidade desses riachos. Algumas entradas são comuns às duas tabelas, enquanto outras são exclusivas de uma delas. A coluna `Riacho` serve como chave para combinar as informações.\n\n### Função left_join()  {.unnumbered}\n\nRetorna todas as linhas da tabela à esquerda (`regiao`) e adiciona colunas da tabela à direita (`habitat`). Linhas sem correspondência na tabela da direita terão valores de `NA`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregiao |> left_join(y = habitat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 7\n   Riacho Bacia      Município      Área Altitude Largura Profundidade\n   <chr>  <chr>      <chr>         <dbl>    <dbl>   <dbl>        <dbl>\n 1 R1     Boicucanga São Sebastião  30.3       74     7.8         20.2\n 2 R4     Boicucanga São Sebastião  30.3       14    10.9         17.7\n 3 R8     Boicucanga São Sebastião  30.3      245     8.3         19.5\n 4 R2     Cubatão    Cubatão       189         29     1.6         11.8\n 5 R5     Cubatão    Cubatão       189         NA    NA           NA  \n 6 R10    Cubatão    Cubatão       189         NA    NA           NA  \n 7 R13    Cubatão    Cubatão       189         NA    NA           NA  \n 8 R6     Quilombo   Santos         86         86    15.2         35.3\n 9 R9     Quilombo   Santos         86         77     4.1         18.9\n10 R7     Quilombo   Santos         86         63    14.2         42.1\n```\n\n\n:::\n:::\n\n\n\n### Função right_join() {.unnumbered}\n\nRetorna todas as linhas da tabela à direita (`habitat`) e adiciona colunas da tabela à esquerda (`regiao`). Linhas sem correspondência na tabela da esquerda terão valores de `NA`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregiao |> right_join(y = habitat, keep=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 8\n  Riacho.x Bacia      Município      Área Riacho.y Altitude Largura Profundidade\n  <chr>    <chr>      <chr>         <dbl> <chr>       <dbl>   <dbl>        <dbl>\n1 R1       Boicucanga São Sebastião  30.3 R1             74     7.8         20.2\n2 R4       Boicucanga São Sebastião  30.3 R4             14    10.9         17.7\n3 R8       Boicucanga São Sebastião  30.3 R8            245     8.3         19.5\n4 R2       Cubatão    Cubatão       189   R2             29     1.6         11.8\n5 R6       Quilombo   Santos         86   R6             86    15.2         35.3\n6 R9       Quilombo   Santos         86   R9             77     4.1         18.9\n7 R7       Quilombo   Santos         86   R7             63    14.2         42.1\n8 <NA>     <NA>       <NA>           NA   R11           241     2.2         20.3\n```\n\n\n:::\n:::\n\n\n\n### Função inner_join() {.unnumbered}\n\nRetorna apenas as linhas que têm correspondência em ambas as tabelas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregiao |> inner_join(y = habitat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 7\n  Riacho Bacia      Município      Área Altitude Largura Profundidade\n  <chr>  <chr>      <chr>         <dbl>    <dbl>   <dbl>        <dbl>\n1 R1     Boicucanga São Sebastião  30.3       74     7.8         20.2\n2 R4     Boicucanga São Sebastião  30.3       14    10.9         17.7\n3 R8     Boicucanga São Sebastião  30.3      245     8.3         19.5\n4 R2     Cubatão    Cubatão       189         29     1.6         11.8\n5 R6     Quilombo   Santos         86         86    15.2         35.3\n6 R9     Quilombo   Santos         86         77     4.1         18.9\n7 R7     Quilombo   Santos         86         63    14.2         42.1\n```\n\n\n:::\n:::\n\n\n\n### Função anti_join() {.unnumbered}\n\nRetorna as linhas da tabela à esquerda que não têm correspondência na tabela à direita. Também retorna todas as colunas da tabela à esquerda.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregiao |> anti_join(y = habitat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  Riacho Bacia   Município  Área\n  <chr>  <chr>   <chr>     <dbl>\n1 R5     Cubatão Cubatão     189\n2 R10    Cubatão Cubatão     189\n3 R13    Cubatão Cubatão     189\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhabitat |> anti_join(y = regiao)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  Riacho Altitude Largura Profundidade\n  <chr>     <dbl>   <dbl>        <dbl>\n1 R11         241     2.2         20.3\n```\n\n\n:::\n:::\n\n\n\n### Função full_join() {.unnumbered}\n\nRetorna todas as linhas e colunas de ambas as tabelas. Nas células onde não houver correspondência, retorna `NA`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregiao |> full_join(y = habitat, keep = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 8\n   Riacho.x Bacia      Município     Área Riacho.y Altitude Largura Profundidade\n   <chr>    <chr>      <chr>        <dbl> <chr>       <dbl>   <dbl>        <dbl>\n 1 R1       Boicucanga São Sebasti…  30.3 R1             74     7.8         20.2\n 2 R4       Boicucanga São Sebasti…  30.3 R4             14    10.9         17.7\n 3 R8       Boicucanga São Sebasti…  30.3 R8            245     8.3         19.5\n 4 R2       Cubatão    Cubatão      189   R2             29     1.6         11.8\n 5 R5       Cubatão    Cubatão      189   <NA>           NA    NA           NA  \n 6 R10      Cubatão    Cubatão      189   <NA>           NA    NA           NA  \n 7 R13      Cubatão    Cubatão      189   <NA>           NA    NA           NA  \n 8 R6       Quilombo   Santos        86   R6             86    15.2         35.3\n 9 R9       Quilombo   Santos        86   R9             77     4.1         18.9\n10 R7       Quilombo   Santos        86   R7             63    14.2         42.1\n11 <NA>     <NA>       <NA>          NA   R11           241     2.2         20.3\n```\n\n\n:::\n:::\n\n\n\n## Criando e modificando colunas com `mutate()`\n\nA função `mutate()` permite criar e modificar colunas em um data frame. Usando a base de dados Doubs river:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ade4)\ndata(doubs)\ndbenv <- doubs$env\nhead(dbenv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dfs alt   slo flo pH har pho nit amm oxy bdo\n1   3 934 6.176  84 79  45   1  20   0 122  27\n2  22 932 3.434 100 80  40   2  20  10 103  19\n3 102 914 3.638 180 83  52   5  22   5 105  35\n4 185 854 3.497 253 80  72  10  21   0 110  13\n5 215 849 3.178 264 81  84  38  52  20  80  62\n6 324 846 3.497 286 79  60  20  15   0 102  53\n```\n\n\n:::\n:::\n\n\n\n### Ajustando a escala de pH {.unnumbered}\n\nA coluna `pH` está multiplicada por $10$. Vamos ajustar isso:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbenv <- dbenv  |> \n  mutate(pH = pH / 10)\n\nhead(dbenv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dfs alt   slo flo  pH har pho nit amm oxy bdo\n1   3 934 6.176  84 7.9  45   1  20   0 122  27\n2  22 932 3.434 100 8.0  40   2  20  10 103  19\n3 102 914 3.638 180 8.3  52   5  22   5 105  35\n4 185 854 3.497 253 8.0  72  10  21   0 110  13\n5 215 849 3.178 264 8.1  84  38  52  20  80  62\n6 324 846 3.497 286 7.9  60  20  15   0 102  53\n```\n\n\n:::\n:::\n\n\n\n### Criando variável categórica {.unnumbered}\n\nCriar uma variável categórica `pH_cat` com níveis `Elevado` (maior ou igual a $8$) e `Neutro` (menor que $8$):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbenv <- dbenv |> \n  mutate(pH = pH / 10) |> \n  mutate(pH_cat = if_else(pH < 8, true = \"Neutro\", false = \"Elevado\"),\n         , .after = pH)\n\nhead(dbenv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dfs alt   slo flo   pH pH_cat har pho nit amm oxy bdo\n1   3 934 6.176  84 0.79 Neutro  45   1  20   0 122  27\n2  22 932 3.434 100 0.80 Neutro  40   2  20  10 103  19\n3 102 914 3.638 180 0.83 Neutro  52   5  22   5 105  35\n4 185 854 3.497 253 0.80 Neutro  72  10  21   0 110  13\n5 215 849 3.178 264 0.81 Neutro  84  38  52  20  80  62\n6 324 846 3.497 286 0.79 Neutro  60  20  15   0 102  53\n```\n\n\n:::\n:::\n\n\n\n### Unindo colunas com `unite()` {.unnumbered}\n\nA função `unite()` do `tidyr` combina duas colunas em uma nova coluna. Usando a tabela `iris`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris2 <- iris |> \n  mutate(Genus = \"Iris\", .before = Species)  |>  \n  unite(scientic_name, Genus, Species, sep = \" \")\n\nhead(iris2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width scientic_name\n1          5.1         3.5          1.4         0.2   Iris setosa\n2          4.9         3.0          1.4         0.2   Iris setosa\n3          4.7         3.2          1.3         0.2   Iris setosa\n4          4.6         3.1          1.5         0.2   Iris setosa\n5          5.0         3.6          1.4         0.2   Iris setosa\n6          5.4         3.9          1.7         0.4   Iris setosa\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-note}\n\n## Observação\n\nA função `unite()` excluiu as colunas que foram unificadas da tabela. Mara mantê-las na tabela utilize o argumento `remove = FALSE`.\n\n:::\n\n## Reformatando data frames: funções `pivot_wider()` e `pivot_longer()`\n\nA tabela `HubbardBrook.csv` ([datasets](https://github.com/FCopf/datasets)) contém dados anuais de vazão e precipitação em dois bacias hidrográficas [@hornbeck1993long]. A primeira (`Deforested`) teve toda a vegetação removida como parte de um experimento de longa duração enquanto a outra se manteve intacta (`Referenca`). Os daods de origem e o experimento detalhado são apresentados am Os dados foram retirados de [tiee.esa.org](https://tiee.esa.org/vol/v1/data_sets/hubbard/hubbard_overview.html)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhbrook <- read_csv(\"https://raw.githubusercontent.com/FCopf/datasets/refs/heads/main/HubbardBrook.csv\")\nhbrook\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 62 × 4\n    Year Treatment   Flow Precipitation\n   <dbl> <chr>      <dbl>         <dbl>\n 1  1958 Deforested  645.         1168.\n 2  1959 Deforested 1012.         1483.\n 3  1960 Deforested  825.         1321.\n 4  1961 Deforested  470.          980.\n 5  1962 Deforested  777.         1232.\n 6  1963 Deforested  774.         1139.\n 7  1964 Deforested  712.         1175.\n 8  1965 Deforested  599.         1115.\n 9  1966 Deforested 1189.         1222.\n10  1967 Deforested 1132.         1315.\n# ℹ 52 more rows\n```\n\n\n:::\n:::\n\n\n\n### Reorganizando data frames de formato longo para formato largo {.unnumbered}\n\nA função `pivot_wider()` é utilizada para transformar dados do formato longo para o formato largo. A seguir, será feito isso apenas para a variável `Flow`, excluindo `Precipitation`, separando os dados nas colunas `Deforested` e `Reference`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhbrook_largo <- hbrook |>\n  select(-Precipitation) |>\n  pivot_wider(names_from = Treatment, values_from = Flow)\nhbrook_largo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 3\n    Year Deforested Reference\n   <dbl>      <dbl>     <dbl>\n 1  1958       645.      567.\n 2  1959      1012.      918.\n 3  1960       825.      752.\n 4  1961       470.      436.\n 5  1962       777.      699.\n 6  1963       774.      663.\n 7  1964       712.      630.\n 8  1965       599.      547.\n 9  1966      1189.      727.\n10  1967      1132.      781.\n# ℹ 21 more rows\n```\n\n\n:::\n:::\n\n\n\n### Reorganizando data frames de formato largo para formato longo {.unnumbered}\n\nA função `pivot_longer()` é utilizada para transformar dados do formato largo para o formato longo, fazendo o caminho inverso de `pivot_wider()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhbrook_longo <- hbrook_largo |>\n  pivot_longer(!Year, names_to = \"Desmatamento\", values_to = \"Flow\")\nhbrook_longo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 62 × 3\n    Year Desmatamento  Flow\n   <dbl> <chr>        <dbl>\n 1  1958 Deforested    645.\n 2  1958 Reference     567.\n 3  1959 Deforested   1012.\n 4  1959 Reference     918.\n 5  1960 Deforested    825.\n 6  1960 Reference     752.\n 7  1961 Deforested    470.\n 8  1961 Reference     436.\n 9  1962 Deforested    777.\n10  1962 Reference     699.\n# ℹ 52 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "transform_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}